name: 1. Stable Build, Test and Push
on:
  push:
    #branches:
    #  - main
    tags:
      - 'v*'
    paths-ignore:
      - '**.md'

jobs:

  docker-release:
    runs-on: [ubuntu-latest]
    steps:
      - name: Checkout externalname-endpoints-controller Repo
        uses: actions/checkout@v3

      - name: Setting ENV's
        run: |
          echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "sha_short=$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_ENV"
          echo "PUSH=1" >> $GITHUB_ENV
        shell: bash

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          install: true

#      - name: Cache Docker layers
#        uses: actions/cache@v2
#        id: buildx-docker
#        with:
#          path: /tmp/.buildx-cache
#          key: buildx-docker
#          restore-keys: |
#            buildx-docker

#      - name: Docker Login
#        env:
#          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
#          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
#        run: echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USERNAME}" --password-stdin
#
#      - name: Docker Build :base
#        run: make buildx-base

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Binary
        run: make all

      - name: Build Image
        run: make container

  # build:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       platform: [linux]
  #       arch: [386, amd64, arm-7, arm-6, arm64]
  #       include:
  #         - platform: darwin
  #           arch: arm64
  #         - platform: darwin
  #           arch: amd64
  #         - platform: windows
  #           arch: amd64

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Add GOBIN to PATH
  #       run: |
  #         echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV
  #       shell: bash

  #     - name: Set Linux Build Flags
  #       if: matrix.platform == 'linux'
  #       run: |
  #         echo "BUILD_FLAGS=-extldflags -static" >> $GITHUB_ENV
  #         echo "XGO_TAGS=netgo osusergo linux sqlite_omit_load_extension" >> $GITHUB_ENV
  #       shell: bash

  #     - name: Set MacOS (Darwin) Build Flags
  #       if: matrix.platform == 'darwin'
  #       run: echo "XGO_TAGS=netgo osusergo darwin sqlite_omit_load_extension" >> $GITHUB_ENV
  #       shell: bash

  #     - name: Build ${{ matrix.platform }}/${{ matrix.arch }}
  #       uses: crazy-max/ghaction-xgo@v1
  #       env:
  #         VERSION: ${{ env.VERSION }}
  #         COMMIT: ${{ github.sha }}
  #       with:
  #         xgo_version: latest
  #         go_version: 1.20
  #         dest: build
  #         prefix: externalname-endpoints-controller
  #         targets: ${{ matrix.platform }}/${{ matrix.arch }}
  #         v: false
  #         x: false
  #         pkg: cmd
  #         buildmode: pie
  #         tags: ${{ env.XGO_TAGS }}
  #         ldflags: -s -w -X main.VERSION=${{ env.VERSION }} -X main.COMMIT=${{ env.COMMIT }} ${{ env.BUILD_FLAGS }}

  #     - name: Compress Linux Builds
  #       if: matrix.platform == 'linux'
  #       run: |
  #         cd build
  #         mv externalname-endpoints-controller-linux-${{ matrix.arch }} externalname-endpoints-controller
  #         chmod +x externalname-endpoints-controller
  #         tar -czvf externalname-endpoints-controller-linux-${{ matrix.arch }}.tar.gz externalname-endpoints-controller
  #         rm -rf externalname-endpoints-controller
  #         echo "compressed=externalname-endpoints-controller-linux-${{ matrix.arch }}.tar.gz" >> $GITHUB_ENV

  #     - name: Compress MacOS (Darwin) Builds
  #       if: matrix.platform == 'darwin'
  #       run: |
  #         cd build
  #         mv externalname-endpoints-controller-darwin-${{ matrix.arch }} externalname-endpoints-controller
  #         chmod +x externalname-endpoints-controller
  #         tar -czvf externalname-endpoints-controller-darwin-${{ matrix.arch }}.tar.gz externalname-endpoints-controller
  #         rm -rf externalname-endpoints-controller
  #         echo "compressed=externalname-endpoints-controller-darwin-${{ matrix.arch }}.tar.gz" >> $GITHUB_ENV

  #     - name: Upload Compiled externalname-endpoints-controller Binary
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: externalname-endpoints-controller-${{ matrix.platform }}-${{ matrix.arch }}
  #         path: ./build

  #     - name: Upload Releases
  #       id: upload-assets
  #       uses: softprops/action-gh-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  #         VERSION: ${{ env.VERSION }}
  #       with:
  #         tag_name: v${{ env.VERSION }}
  #         draft: true
  #         prerelease: true
  #         files: build/${{ env.compressed }}
